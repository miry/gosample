version: 2.1
dry:
  restore_shards_cache: &restore_shards_cache
    # Use {{ checksum "shard.yml" }} if developing a shard instead of an app
    keys:
      - shards-cache-v1-{{ .Branch }}-{{ checksum "shard.lock" }}
      - shards-cache-v1-{{ .Branch }}
      - shards-cache-v1

  save_shards_cache: &save_shards_cache
    # Use {{ checksum "shard.yml" }} if developing a shard instead of an app
    key: shards-cache-v1-{{ .Branch }}-{{ checksum "shard.lock" }}
    paths:
      - shards-cache

  restore_bundle_cache: &restore_bundle_cache
    keys:
      - bundle-cache-v2-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - bundle-cache-v2-{{ .Branch }}
      - bundle-cache-v2

  save_bundle_cache: &save_bundle_cache
    key: bundle-cache-v2-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
    paths:
      - vendor/bundle

# Pipeline parameters
parameters:
  workflow_ondemand:
    type: boolean
    default: false
  commit_id:
    type: string
    default: "master"
  workflow_id:
    type: string
    default: "0"

jobs:
  golang:
    # working_directory: /go/src/github.com/miry/samples/
    docker:
      - image: circleci/golang:latest
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS/{algorithms,btree,codinggame,gohttproxy,justforfunc}
      - run: go get -u github.com/jstemmer/go-junit-report
      - run: |-
          cd algorithms
          go test ./... -v |& go-junit-report > $TEST_RESULTS/algorithms/report.xml
      - run: |-
          cd gohttproxy
          go test ./... -v |& go-junit-report > $TEST_RESULTS/gohttproxy/report.xml
      - run: |-
          cd justforfunc
          go test ./... -v |& go-junit-report > $TEST_RESULTS/justforfunc/report.xml
      - run: |-
          cd benchmarks
          go test -bench=. ./... -v
      - store_test_results:
          path: /tmp/test-results

  ruby:
    docker:
      - image: cimg/ruby:3.0.0
        environment:
          RUBYOPT: "--enable-frozen-string-literal"
          BUNDLE_PATH: "vendor/bundle"

    steps:
      - checkout
      - run: ruby --version
      - run: gem install bundler:2.2.11
      - restore_cache: *restore_bundle_cache
      - run: bundle install
      - save_cache: *save_bundle_cache

      - run:
          command: bundle exec rubocop -c .rubocop.yml -L
          background: true
      - run: ruby algorithms/problems/codewars/*_test.rb
      - run: ruby algorithms/problems/interviewcake/reverse_words_test.rb

  crystal:
    # https://crystal-lang.org/2018/09/04/using-circleci-2.0-for-your-crystal-projects.html
    docker:
      - image: crystallang/crystal:latest
    steps:
      - run: crystal --version
      - checkout

      - restore_cache: *restore_shards_cache
      - run: shards install
      - save_cache: *save_shards_cache

      - run: crystal run algorithms/list/node_test.cr -- --verbose

  distribusion:
    working_directory: ~/samples/distribusion
    docker:
      - image: cimg/ruby:3.0.0
        environment:
          RUBYOPT: "--enable-frozen-string-literal -w"
          BUNDLE_PATH: "vendor/bundle"
    steps:
      - checkout:
          path: ~/samples
      - run: gem install bundler:2.2.11
      - restore_cache: *restore_bundle_cache
      - run: bundle install
      - save_cache: *save_bundle_cache

      - run: bundle exec standardrb
      - run: bundle exec rake test
      # NOTICE: The challenge.distribusion.com:443 is not working anymore
      # - run: bundle exec ruby ./bin/local -v -s all -p $DISTRIBUSION_PASSPHRASE | sed s/"${DISTRIBUSION_PASSPHRASE}"/xxx/g

      - store_artifacts:
          path: coverage
  godnsproxy:
    working_directory: ~/samples/godnsproxy
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout:
          path: ~/samples
      - run: go test ./... -v -race
      - run: go test ./... -v -bench=.

  # Job to trigger a pipeline from another repo
  trigger_remote_pipeline:
    docker:
      - image: cimg/base:stable

    steps:
      - run: curl http://ifconfig.ca
      - run: |-
          curl \
               -X POST \
               -u ${CIRCLE_TOKEN}: \
               --header "Content-Type: application/json" \
               -d '{
                    "branch": "article-circleci-dep-tasks",
                    "parameters": {
                        "workflow_ondemand": true,
                        "workflow_id": "'$CIRCLE_WORKFLOW_ID'",
                        "commit_id": "'$CIRCLE_SHA1'"
                      }
                    }' https://circleci.com/api/v2/project/gh/miry/samples/pipeline
  remote_pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - run: echo "The job triggered from 'remote' repo with workflow id << pipeline.parameters.workflow_id >> with commit id << pipeline.parameters.commit_id >>"

  send_approval:
    environment:
      REMOTE_WORKFLOW_ID: << pipeline.parameters.workflow_id >>
    docker:
      - image: cimg/base:stable
    steps:
      - run: sudo apt-get update && sudo apt-get install -y curl
      - run: |-
          WORKFLOW_JOBS=$(curl -s -H "Circle-Token: ${CIRCLE_TOKEN}" "https://circleci.com/api/v2/workflow/${REMOTE_WORKFLOW_ID}/job")
          APPROVAL_JOB_ID=$(echo "$WORKFLOW_JOBS" | jq -cr '.items[] | select(.type == "approval")' | jq -r .id)
          curl \
                -u ${CIRCLE_TOKEN}: \
                -X POST \
                --header "Content-Type: application/json" \
                "https://circleci.com/api/v2/workflow/${REMOTE_WORKFLOW_ID}/approve/${APPROVAL_JOB_ID}"

workflows:
  version: 2
  challenges:
    unless: << pipeline.parameters.workflow_ondemand >>
    jobs:
      - distribusion
      - godnsproxy
  tests:
    unless: << pipeline.parameters.workflow_ondemand >>
    jobs:
      - golang
      - ruby
      - crystal
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - distribusion
      - golang
      - ruby
      - crystal
  dependencies:
    unless: << pipeline.parameters.workflow_ondemand >>
    jobs:
      - trigger_remote_pipeline
      - wait_for_approve:
          # https://circleci.com/docs/2.0/configuration-reference/#type
          type: approval
          requires:
            - trigger_remote_pipeline
  ondemand:
    when: << pipeline.parameters.workflow_ondemand >>
    jobs:
      - remote_pipeline:
          post-steps:
            - run:
                name: Cancel on fail
                when: on_fail
                command: |
                  sudo apt-get update && sudo apt install -y curl
                  curl \
                      -u ${CIRCLE_TOKEN}: \
                      -X POST \
                      --header "Content-Type: application/json" \
                      "https://circleci.com/api/v2/workflow/${REMOTE_WORKFLOW_ID}/cancel"

      - send_approval:
          requires:
            - remote_pipeline
